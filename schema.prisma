// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  // previewFeatures = ["filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CorrectAdmin {
  uuid                 String                 @id @default(uuid())
  name                 String
  userName             String                 @unique
  email                String                 @unique
  password             String
  isAdmin              Boolean                @default(true)
  CorrectAdminBusiness CorrectAdminBusiness[]

  @@map("correct_admin")
}

enum Permissions {
  all
  sales
  finances
  marketing
  benefits
  transports
  allPartners
  allEmployers
}

enum Status {
  pending
  active
  inactive
  pending_password
  pending_validation
  deleted
}

enum BusinessStatus {
  pending_approval
  pending_contract
  active
  inactive
}

model BusinessUser {
  uuid               String        @id @default(uuid())
  business_info_uuid String
  is_admin           Boolean       @default(false)
  document           String?       @unique
  name               String?
  email              String?       @unique
  user_name          String?
  password           String
  function           String?
  permissions        Permissions[] @default([all])
  status             Status        @default(pending_password)
  created_at         String?
  updated_at         String?

  BusinessInfo         BusinessInfo           @relation(fields: [business_info_uuid], references: [uuid])
  BusinessNotification BusinessNotification[]

  @@map("business_users")
}

model CorrectAdminBusiness {
  uuid               String @id @default(uuid())
  business_info_uuid String
  correct_admin_uuid String

  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])
  CorrectAdmin CorrectAdmin @relation(fields: [correct_admin_uuid], references: [uuid])

  @@map("correctAdmin_business")
}

model BusinessInfo {
  uuid                String              @id @default(uuid())
  address_uuid        String
  fantasy_name        String
  corporate_reason    String?
  document            String              @unique
  classification      String
  colaborators_number Int
  status              BusinessStatus      @default(pending_approval)
  phone_1             String
  phone_2             String?
  email               String              @unique
  business_type       BusinessTypeOptions
  employer_branch     String?
  created_at          String
  updated_at          String?

  Address Address? @relation(fields: [address_uuid], references: [uuid])

  BusinessUser         BusinessUser[]
  UserInfo             UserInfo[]
  Transactions         Transactions[]
  BusinessConfig       BusinessConfig[]
  Contracts            ContractInfo[]
  BusinessContract     BusinessContract[]
  Products             Products[]
  Item                 Item[]
  CorrectAdminBusiness CorrectAdminBusiness[]
  BusinessinfoBranch   BusinessinfoBranch[]
  BusinessInfoItem     BusinessInfoItem[]
  EmployerItemDetails  EmployerItemDetails[]
  userInfoUuid         String?
  employees            UserInfo[]             @relation("UserBusinessInfo")
  UserItem             UserItem[]
  BenefitGroups        BenefitGroups[]
  Employee             Employee[]

  @@map("business_data")
}

enum BusinessTypeOptions {
  empregador
  comercio
  autonomo_comercio
  empregador_comercio
}

model Address {
  uuid         String  @id @default(uuid())
  line1        String?
  line2        String?
  line3        String?
  postal_code  String
  neighborhood String?
  city         String?
  state        String?
  country      String?
  created_at   String?
  updated_at   String?

  BusinessInfo BusinessInfo[]
  UserInfo     UserInfo[]

  @@map("addresses")
}

model UserInfo {
  uuid                          String  @id @default(uuid())
  address_uuid                  String?
  document                      String  @unique
  document2                     String?
  document3                     String?
  full_name                     String
  display_name                  String?
  internal_company_code         String?
  gender                        String?
  email                         String? @unique
  date_of_birth                 String
  phone                         String?
  salary                        Int?
  company_owner                 Boolean @default(false)
  status                        Status  @default(pending)
  function                      String?
  recommendation_code           String?
  is_employee                   Boolean @default(false)
  is_authenticated              Boolean @default(false)
  marital_status                String?
  dependents_quantity           Int     @default(0)
  user_document_validation_uuid String?
  created_at                    String?
  updated_at                    String?

  UserAuth UserAuth[]

  businesses       BusinessInfo[]          @relation("UserBusinessInfo")
  Address          Address?                @relation(fields: [address_uuid], references: [uuid])
  UserValidation   UserDocumentValidation? @relation(fields: [user_document_validation_uuid], references: [uuid])
  Transactions     Transactions[]
  UserNotification UserNotification[]
  UserItem         UserItem[]
  ContractInfo     ContractInfo[]
  BusinessInfo     BusinessInfo?           @relation(fields: [businessInfoUuid], references: [uuid])
  businessInfoUuid String?
  Employee         Employee[]

  @@map("user_info")
}

model Employee {
  uuid                  String  @id @default(uuid())
  user_info_uuid        String
  business_info_uuid    String
  company_internal_code String?
  salary                Int?
  dependents_quantity   Int?
  job_title             String?
  company_owner         Boolean @default(false)
  created_at            String?
  updated_at            String?

  UserInfo     UserInfo     @relation(fields: [user_info_uuid], references: [uuid])
  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("employee")
}

model UserDocumentValidation {
  uuid                   String                       @id @default(uuid())
  document_front_base64  String?
  document_front_status  UserDocumentValidationStatus @default(pending_to_send)
  document_back_base64   String?
  document_back_status   UserDocumentValidationStatus @default(pending_to_send)
  selfie_base64          String?
  selfie_status          UserDocumentValidationStatus @default(pending_to_send)
  document_selfie_base64 String?
  document_selfie_status UserDocumentValidationStatus @default(pending_to_send)
  created_at             String?
  updated_at             String?

  UserInfo UserInfo[]

  @@map("user_document_validation")
}

enum UserDocumentValidationStatus {
  approved
  denied
  pending_to_send
  under_analysis
}

model UserAuth {
  uuid           String  @id @default(uuid())
  user_info_uuid String?
  document       String  @unique
  email          String  @unique
  password       String
  is_active      Boolean @default(true)

  created_at String?
  updated_at String?

  UserInfo UserInfo? @relation(fields: [user_info_uuid], references: [uuid])

  @@map("users_auth")
}

model Item {
  uuid               String  @id @default(uuid())
  name               String
  img_url            String?
  description        String
  item_type          String
  item_category      String
  parent_uuid        String?
  business_info_uuid String?
  created_at         String
  updated_at         String?

  BusinessInfo        BusinessInfo?         @relation(fields: [business_info_uuid], references: [uuid])
  BranchItem          BranchItem[]
  ContractInfo        ContractInfo[]
  BusinessInfoItem    BusinessInfoItem[]
  EmployerItemDetails EmployerItemDetails[]
  UserItem            UserItem[]

  @@map("items")
}

model BranchInfo {
  uuid               String               @id @default(uuid())
  name               String
  marketing_tax      Int
  admin_tax          Int
  market_place_tax   Int
  created_at         String
  updated_at         String?
  BranchItem         BranchItem[]
  BusinessinfoBranch BusinessinfoBranch[]

  @@map("branch_info")
}

model BusinessinfoBranch {
  uuid               String @id @default(uuid())
  branch_info_uuid   String
  business_info_uuid String
  created_at         String

  BranchInfo   BranchInfo   @relation(fields: [branch_info_uuid], references: [uuid])
  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("businessInfo_branch")
}

model BranchItem {
  uuid            String @id @default(uuid())
  branchInfo_uuid String
  item_uuid       String
  created_at      String

  Item   Item       @relation(fields: [item_uuid], references: [uuid])
  Branch BranchInfo @relation(fields: [branchInfo_uuid], references: [uuid])

  @@map("branch_item")
}

model BusinessInfoItem {
  uuid               String @id @default(uuid())
  item_uuid          String
  business_info_uuid String
  created_at         String

  Item         Item         @relation(fields: [item_uuid], references: [uuid])
  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("businessInfo_item")
}

model EmployerItemDetails {
  uuid               String  @id @default(uuid())
  item_uuid          String
  business_info_uuid String
  cycle_start_day    Int?
  cycle_end_day      Int?
  created_at         String?
  updated_at         String?

  Item                     Item                    @relation(fields: [item_uuid], references: [uuid])
  BusinessInfo             BusinessInfo            @relation(fields: [business_info_uuid], references: [uuid])
  EmployerPreItemRegisters EmployerItemRegisters[]

  @@map("employer_item_details")
}

model EmployerItemRegisters {
  uuid                                  String  @id @default(uuid())
  employerItemDetails_uuid              String
  correct_payment_date                  String?
  correct_releasing_amount_to_user_date String?
  send_file_to_business_date            String?
  created_at                            String?
  updated_at                            String?

  EmployerItemDetail EmployerItemDetails @relation(fields: [employerItemDetails_uuid], references: [uuid])

  @@map("employer_item_registers")
}

model UserItem {
  uuid                  String         @id @default(uuid())
  user_info_uuid        String
  business_info_uuid    String?
  item_uuid             String
  item_name             String
  balance               Int
  status                UserItemStatus
  blocked_at            String?
  cancelled_at          String?
  cancelling_request_at String?
  block_reason          String?
  cancel_reason         String?
  grace_period_end_date String?
  created_at            String?
  updated_at            String?
  Transactions          Transactions[]

  UserInfo UserInfo      @relation(fields: [user_info_uuid], references: [uuid])
  Item     Item          @relation(fields: [item_uuid], references: [uuid])
  Business BusinessInfo? @relation(fields: [business_info_uuid], references: [uuid])

  @@map("user_item")
}

enum UserItemStatus {
  active
  inactive
  blocked
  cancelled
  to_be_cancelled
}

enum ContractType {
  BUSINESS
  USER
}

model ContractInfo {
  uuid               String       @id @default(uuid())
  item_uuid          String
  name               String?
  content            String
  version            String?
  assigned_at        String
  contract_type      ContractType
  business_info_uuid String?
  user_info_uuid     String?
  updated_at         String?

  Item         Item          @relation(fields: [item_uuid], references: [uuid])
  BusinessInfo BusinessInfo? @relation(fields: [business_info_uuid], references: [uuid])
  UserInfo     UserInfo?     @relation(fields: [user_info_uuid], references: [uuid])

  BusinessContract BusinessContract[]

  @@map("contract_info")
}

model BusinessContract {
  uuid               String @id @default(uuid())
  business_info_uuid String
  contract_info_uuid String

  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])
  ContractInfo ContractInfo @relation(fields: [contract_info_uuid], references: [uuid])

  @@map("business_contract")
}

enum TransactionStatus {
  pending
  sucess
  fail
}

model Transactions {
  uuid               String            @id @default(uuid())
  user_item_uuid     String
  favored_uuid       String
  business_info_uuid String
  amount             Int
  fee_amount         Int
  cashback           Int
  status             TransactionStatus
  created_at         String
  updated_at         String

  UserItem     UserItem     @relation(fields: [user_item_uuid], references: [uuid])
  UserInfo     UserInfo     @relation(fields: [favored_uuid], references: [uuid])
  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("transactions")
}

model BusinessRecommendation {
  uuid          String @id @default(uuid())
  business_name String
  owner_name    String
  city          String
  state         String
  neighborhood  String
  phone         String
  social_media  String

  @@map("business_recommendations")
}

model BusinessConfig {
  uuid                     String   @id @default(uuid())
  business_info_uuid       String
  admin_tax                Int
  marketing_tax            Int
  block_list               String[] @default([])
  cycle_start_date         String?
  cycle_end_date           String?
  cycle_paper_payment_date String?

  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("business_config")
}

model UserNotification {
  uuid           String  @id @default(uuid())
  user_info_uuid String
  title          String
  description    String
  read           Boolean
  created_at     String

  UserInfo UserInfo @relation(fields: [user_info_uuid], references: [uuid])

  @@map("user_notification")
}

model BusinessNotification {
  uuid               String  @id @default(uuid())
  business_user_uuid String
  title              String
  description        String
  read               Boolean
  created_at         String

  BusinessUser BusinessUser @relation(fields: [business_user_uuid], references: [uuid])

  @@map("business_notifications")
}

model BenefitGroups {
  uuid                      String       @id @default(uuid())
  group_name                String
  employerItemDetails_uuids String[]
  value                     Int
  user_info_uuid            String[]
  business_info_uuid        String
  created_at                String?
  updated_at                String?
  BusinessInfo              BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("benefit_groups")
}

model Categories {
  uuid        String     @id @default(uuid())
  name        String
  description String?
  is_active   Boolean
  created_at  String?
  updated_at  String?
  Products    Products[]

  @@map("categories")
}

model Products {
  uuid               String   @id @default(uuid())
  category_uuid      String
  name               String
  description        String?
  original_price     Int
  price              Int
  image              String[]
  stock              Int
  weight             String
  height             String
  width              String
  business_info_uuid String
  created_at         String?
  updated_at         String?

  Businessinfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])
  Categories   Categories   @relation(fields: [category_uuid], references: [uuid])

  @@map("products")
}
