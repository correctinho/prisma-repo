// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  // previewFeatures = ["filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CorrectAdmin {
  uuid     String  @id @default(uuid())
  name     String
  userName String  @unique
  email    String  @unique
  password String
  isAdmin  Boolean @default(true)

  @@map("correct_admin")
}

enum Permissions {
  all
  sales
  finances
  marketing
  benefits
  transports
  allPartners
  allEmployers
}

enum Status {
  pending
  active
  inactive
  pending_password
  pending_validation
}

enum BusinessStatus {
  pending_approval
  pending_contract
  active
  inactive
}

model BusinessUser {
  uuid               String        @id @default(uuid())
  business_info_uuid String
  is_admin           Boolean       @default(false)
  document           String?       @unique
  name               String?
  email              String?       @unique
  user_name          String?
  password           String
  function           String?
  permissions        Permissions[] @default([all])
  status             Status        @default(pending_password)
  created_at         String?
  updated_at         String?

  BusinessInfo         BusinessInfo           @relation(fields: [business_info_uuid], references: [uuid])
  BusinessNotification BusinessNotification[]

  @@map("business_users")
}

model BusinessInfo {
  uuid                String              @id @default(uuid())
  address_uuid        String
  branch_info_uuid    String?
  branch_name         String?
  fantasy_name        String
  corporate_reason    String?
  document            String              @unique
  classification      String
  colaborators_number Int
  status              BusinessStatus      @default(pending_approval)
  phone_1             String
  phone_2             String?
  email               String              @unique
  business_type       BusinessTypeOptions

  Address Address? @relation(fields: [address_uuid], references: [uuid])

  BusinessUser     BusinessUser[]
  UserInfo         UserInfo[]
  Transactions     Transactions[]
  BusinessConfig   BusinessConfig[]
  Contracts        ContractInfo[]
  BusinessContract BusinessContract[]
  Products         Products[]

  @@map("business_data")
}

enum BusinessTypeOptions {
  empregador
  comercio
  autonomo_comercio
  empregador_comercio
}

model Address {
  uuid         String  @id @default(uuid())
  line1        String?
  line2        String?
  line3        String?
  postal_code  String
  neighborhood String?
  city         String?
  state        String?
  country      String?
  created_at   String?
  updated_at   String?

  BusinessInfo BusinessInfo[]
  UserInfo     UserInfo[]

  @@map("addresses")
}

model UserInfo {
  uuid                          String  @id @default(uuid())
  business_info_uuid            String?
  address_uuid                  String?
  document                      String  @unique
  document2                     String? @unique
  document3                     String?
  full_name                     String
  display_name                  String?
  internal_company_code         String?
  gender                        String?
  email                         String? @unique
  date_of_birth                 String
  phone                         String?
  salary                        Int?
  company_owner                 Boolean @default(false)
  status                        Status  @default(pending)
  function                      String?
  recommendation_code           String?
  is_authenticated              Boolean @default(false)
  marital_status                String?
  dependents_quantity           Int     @default(0)
  user_document_validation_uuid String?
  created_at                    String?
  updated_at                    String?

  UserAuth UserAuth[]

  BusinessInfo     BusinessInfo?           @relation(fields: [business_info_uuid], references: [uuid])
  Address          Address?                @relation(fields: [address_uuid], references: [uuid])
  UserValidation   UserDocumentValidation? @relation(fields: [user_document_validation_uuid], references: [uuid])
  UserWallet       UserWallet[]
  Transactions     Transactions[]
  UserNotification UserNotification[]

  @@map("user_info")
}

model UserDocumentValidation {
  uuid                   String                       @id @default(uuid())
  document_front_base64  String?
  document_front_status  UserDocumentValidationStatus @default(pending_to_send)
  document_back_base64   String?
  document_back_status   UserDocumentValidationStatus @default(pending_to_send)
  selfie_base64          String?
  selfie_status          UserDocumentValidationStatus @default(pending_to_send)
  document_selfie_base64 String?
  document_selfie_status UserDocumentValidationStatus @default(pending_to_send)
  created_at             String?
  updated_at             String?

  UserInfo UserInfo[]

  @@map("user_document_validation")
}

enum UserDocumentValidationStatus {
  approved
  denied
  pending_to_send
  under_analysis
}

model UserAuth {
  uuid           String  @id @default(uuid())
  user_info_uuid String?
  document       String  @unique
  email          String  @unique
  password       String
  is_active      Boolean @default(true)

  created_at String?
  updated_at String?

  UserInfo UserInfo? @relation(fields: [user_info_uuid], references: [uuid])

  @@map("users_auth")
}

model Item {
  uuid          String  @id @default(uuid())
  name          String
  description   String
  item_type     String
  item_category String
  parent_uuid   String?
  created_at    String
  updated_at    String?

  @@map("items")
}

model BranchInfo {
  uuid             String  @id @default(uuid())
  name             String
  marketing_tax    Int
  admin_tax        Int
  market_place_tax Int
  created_at       String
  updated_at       String?

  @@map("branch_info")
}

model BranchItem {
  uuid            String @id @default(uuid())
  branchInfo_uuid String
  item_uuid       String
  created_at      String

  @@map("branch_item")
}

model UserWallet {
  uuid           String @id @default(uuid())
  user_info_uuid String
  benefit_uuid   String
  balance        Int
  created_at     String
  updated_at     String

  UserInfo     UserInfo       @relation(fields: [user_info_uuid], references: [uuid])
  Transactions Transactions[]

  @@map("users_wallet")
}

model ContractInfo {
  uuid               String  @id @default(uuid())
  name               String?
  content            String
  version            String?
  assigned_at        String
  business_info_uuid String

  BusinessInfo     BusinessInfo[]
  BusinessContract BusinessContract[]

  @@map("contract_info")
}

model BusinessContract {
  uuid               String @id @default(uuid())
  business_info_uuid String
  contract_info_uuid String

  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])
  ContractInfo ContractInfo @relation(fields: [contract_info_uuid], references: [uuid])

  @@map("business_contract")
}

enum TransactionStatus {
  pending
  sucess
  fail
}

model Transactions {
  uuid               String            @id @default(uuid())
  payer_wallet_uuid  String
  favored_uuid       String
  business_info_uuid String
  amount             Int
  fee_amount         Int
  cashback           Int
  status             TransactionStatus
  created_at         String
  updated_at         String

  UserWallet   UserWallet   @relation(fields: [payer_wallet_uuid], references: [uuid])
  UserInfo     UserInfo     @relation(fields: [favored_uuid], references: [uuid])
  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("transactions")
}

model BusinessRecommendation {
  uuid          String @id @default(uuid())
  business_name String
  owner_name    String
  city          String
  state         String
  neighborhood  String
  phone         String
  social_media  String

  @@map("business_recommendations")
}

model BusinessConfig {
  uuid                     String   @id @default(uuid())
  business_info_uuid       String
  admin_tax                Int
  marketing_tax            Int
  block_list               String[] @default([])
  cycle_start_date         String?
  cycle_end_date           String?
  cycle_paper_payment_date String?

  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("business_config")
}

model UserNotification {
  uuid           String  @id @default(uuid())
  user_info_uuid String
  title          String
  description    String
  read           Boolean
  created_at     String

  UserInfo UserInfo @relation(fields: [user_info_uuid], references: [uuid])

  @@map("user_notification")
}

model BusinessNotification {
  uuid               String  @id @default(uuid())
  business_user_uuid String
  title              String
  description        String
  read               Boolean
  created_at         String

  BusinessUser BusinessUser @relation(fields: [business_user_uuid], references: [uuid])

  @@map("business_notifications")
}

model Categories {
  uuid        String     @id @default(uuid())
  name        String
  description String?
  is_active   Boolean
  created_at  String?
  updated_at  String?
  Products    Products[]

  @@map("categories")
}

model Products {
  uuid           String  @id @default(uuid())
  category_uuid  String
  name           String
  description    String?
  original_price Int
  price          Int
  image          String[]
  stock          Int
  weight         String
  height         String
  width          String
  business_info_uuid String
  created_at         String?
  updated_at         String?

  Businessinfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])
  Categories   Categories   @relation(fields: [category_uuid], references: [uuid])

  @@map("products")
}
