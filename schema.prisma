// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  // previewFeatures = ["filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CorrectAdmin {
  uuid                    String                    @id @default(uuid())
  name                    String
  userName                String                    @unique
  email                   String                    @unique
  password                String
  isAdmin                 Boolean                   @default(true)
  CorrectAdminBusiness    CorrectAdminBusiness[]
  CorrectUserBusinessInfo CorrectUserBusinessInfo[]

  @@map("correct_admin")
}

enum Permissions {
  all
  sales
  finances
  marketing
  benefits
  transports
  allPartners
  allEmployers
}

enum Status {
  pending
  active
  inactive
  pending_password
  pending_validation
  deleted
}

enum BusinessStatus {
  pending_approval
  pending_contract
  active
  inactive
}

model BusinessUser {
  uuid               String        @id @default(uuid())
  business_info_uuid String
  is_admin           Boolean       @default(false)
  document           String?       @unique
  name               String?
  email              String?       @unique
  user_name          String?
  password           String
  function           String?
  transaction_pin    String?
  permissions        Permissions[] @default([all])
  status             Status        @default(pending_password)
  created_at         String?
  updated_at         String?

  BusinessInfo         BusinessInfo           @relation(fields: [business_info_uuid], references: [uuid])
  BusinessNotification BusinessNotification[]
  Transactions         Transactions[]
  CreatedProducts      Products[]             @relation("CreatedProducts")
  UpdatedProducts      Products[]             @relation("UpdatedProducts")
  DeletedProducts      Products[]             @relation("DeletedProducts")
  ProductChanges       ProductHistory[]

  @@map("business_users")
}

model CorrectAdminBusiness {
  uuid               String @id @default(uuid())
  business_info_uuid String
  correct_admin_uuid String

  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])
  CorrectAdmin CorrectAdmin @relation(fields: [correct_admin_uuid], references: [uuid])

  @@map("correctAdmin_business")
}

model BusinessInfo {
  uuid                String              @id @default(uuid())
  address_uuid        String
  fantasy_name        String
  corporate_reason    String?
  document            String              @unique
  classification      String
  colaborators_number Int
  status              BusinessStatus      @default(pending_approval)
  phone_1             String
  phone_2             String?
  email               String              @unique
  business_type       BusinessTypeOptions
  employer_branch     String?
  created_at          String
  updated_at          String?

  Address Address? @relation(fields: [address_uuid], references: [uuid])

  BusinessUser            BusinessUser[]
  Contracts               ContractInfo[]
  BusinessContract        BusinessContract[]
  Products                Products[]
  Item                    Item[]
  CorrectAdminBusiness    CorrectAdminBusiness[]
  BusinessinfoBranch      BusinessinfoBranch[]
  BusinessInfoItem        BusinessInfoItem[]
  EmployerItemDetails     EmployerItemDetails[]
  userInfoUuid            String?
  employees               UserInfo[]                @relation("UserBusinessInfo")
  UserItem                UserItem[]
  BenefitGroups           BenefitGroups[]
  Employee                Employee[]
  PartnerConfig           PartnerConfig[]
  CorrectUserBusinessInfo CorrectUserBusinessInfo[]
  BusinessAccount         BusinessAccount[]
  Cart                    Cart[]
  FavoredTransactions     Transactions[]            @relation("FavoredTransactions")
  // Lista de transações onde esta empresa foi a PAGADORA
  PayerTransactions       Transactions[]            @relation("PayerTransactions")

  @@map("business_data")
}

enum BusinessTypeOptions {
  empregador
  comercio
  autonomo_comercio
  empregador_comercio
}

model Address {
  uuid         String  @id @default(uuid())
  line1        String?
  line2        String?
  line3        String?
  postal_code  String
  neighborhood String?
  city         String?
  state        String?
  country      String?
  created_at   String?
  updated_at   String?

  BusinessInfo BusinessInfo[]
  UserInfo     UserInfo[]

  @@map("addresses")
}

model UserInfo {
  uuid                          String  @id @default(uuid())
  address_uuid                  String?
  document                      String  @unique
  document2                     String?
  document3                     String?
  full_name                     String
  display_name                  String?
  gender                        String?
  email                         String? @unique
  date_of_birth                 String
  phone                         String?
  status                        Status  @default(pending)
  recommendation_code           String?
  is_employee                   Boolean @default(false)
  is_authenticated              Boolean @default(false)
  marital_status                String?
  user_document_validation_uuid String?
  created_at                    String?
  updated_at                    String?

  UserAuth UserAuth[]

  businesses       BusinessInfo[]          @relation("UserBusinessInfo")
  Address          Address?                @relation(fields: [address_uuid], references: [uuid])
  UserValidation   UserDocumentValidation? @relation(fields: [user_document_validation_uuid], references: [uuid])
  Transactions     Transactions[]
  UserNotification UserNotification[]
  UserItem         UserItem[]
  ContractInfo     ContractInfo[]
  Employee         Employee[]
  Cart             Cart[]

  @@map("user_info")
}

model Employee {
  uuid                  String  @id @default(uuid())
  user_info_uuid        String
  business_info_uuid    String
  company_internal_code String?
  salary                Int?
  dependents_quantity   Int?
  job_title             String?
  company_owner         Boolean @default(false)
  created_at            String?
  updated_at            String?

  UserInfo     UserInfo     @relation(fields: [user_info_uuid], references: [uuid])
  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("employee")
}

model UserDocumentValidation {
  uuid                   String                       @id @default(uuid())
  document_front_base64  String?
  document_front_status  UserDocumentValidationStatus @default(pending_to_send)
  document_back_base64   String?
  document_back_status   UserDocumentValidationStatus @default(pending_to_send)
  selfie_base64          String?
  selfie_status          UserDocumentValidationStatus @default(pending_to_send)
  document_selfie_base64 String?
  document_selfie_status UserDocumentValidationStatus @default(pending_to_send)
  created_at             String?
  updated_at             String?

  UserInfo UserInfo[]

  @@map("user_document_validation")
}

enum UserDocumentValidationStatus {
  approved
  denied
  pending_to_send
  under_analysis
}

model UserAuth {
  uuid            String  @id @default(uuid())
  user_info_uuid  String?
  document        String  @unique
  email           String  @unique
  password        String
  transaction_pin String?
  is_active       Boolean @default(true)

  created_at String?
  updated_at String?

  UserInfo UserInfo? @relation(fields: [user_info_uuid], references: [uuid])

  @@map("users_auth")
}

enum ItemCategory {
  pos_pago
  pre_pago
}

enum ItemType {
  gratuito
  programa
  produto
}

model Item {
  uuid               String       @id @default(uuid())
  name               String
  img_url            String?
  description        String
  item_type          ItemType
  item_category      ItemCategory
  parent_uuid        String?
  business_info_uuid String?
  created_at         String
  updated_at         String?

  BusinessInfo        BusinessInfo?         @relation(fields: [business_info_uuid], references: [uuid])
  BranchItem          BranchItem[]
  ContractInfo        ContractInfo[]
  BusinessInfoItem    BusinessInfoItem[]
  EmployerItemDetails EmployerItemDetails[]
  UserItem            UserItem[]

  @@map("items")
}

model BranchInfo {
  uuid               String               @id @default(uuid())
  name               String
  marketing_tax      Int
  admin_tax          Int
  market_place_tax   Int
  created_at         String
  updated_at         String?
  BranchItem         BranchItem[]
  BusinessinfoBranch BusinessinfoBranch[]

  @@map("branch_info")
}

model BusinessinfoBranch {
  uuid               String @id @default(uuid())
  branch_info_uuid   String
  business_info_uuid String
  created_at         String

  BranchInfo   BranchInfo   @relation(fields: [branch_info_uuid], references: [uuid])
  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("businessInfo_branch")
}

model BranchItem {
  uuid            String @id @default(uuid())
  branchInfo_uuid String
  item_uuid       String
  created_at      String

  Item   Item       @relation(fields: [item_uuid], references: [uuid])
  Branch BranchInfo @relation(fields: [branchInfo_uuid], references: [uuid])

  @@map("branch_item")
}

model BusinessInfoItem {
  uuid               String @id @default(uuid())
  item_uuid          String
  business_info_uuid String
  created_at         String

  Item         Item         @relation(fields: [item_uuid], references: [uuid])
  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("businessInfo_item")
}

model EmployerItemDetails {
  uuid               String  @id @default(uuid())
  item_uuid          String
  business_info_uuid String
  is_active          Boolean @default(false)
  cycle_start_day    Int?
  cycle_end_day      Int?
  created_at         String?
  updated_at         String?

  Item                     Item                    @relation(fields: [item_uuid], references: [uuid])
  BusinessInfo             BusinessInfo            @relation(fields: [business_info_uuid], references: [uuid])
  EmployerPreItemRegisters EmployerItemRegisters[]
  BenefitGroups            BenefitGroups[]

  @@map("employer_item_details")
}

model EmployerItemRegisters {
  uuid                                  String  @id @default(uuid())
  employerItemDetails_uuid              String
  correct_payment_date                  String?
  correct_releasing_amount_to_user_date String?
  send_file_to_business_date            String?
  created_at                            String?
  updated_at                            String?

  EmployerItemDetail EmployerItemDetails @relation(fields: [employerItemDetails_uuid], references: [uuid])

  @@map("employer_item_registers")
}

model UserItem {
  uuid                  String         @id @default(uuid())
  user_info_uuid        String
  business_info_uuid    String?
  item_uuid             String
  item_name             String
  balance               Int
  group_uuid            String?
  status                UserItemStatus
  blocked_at            String?
  cancelled_at          String?
  cancelling_request_at String?
  block_reason          String?
  cancel_reason         String?
  grace_period_end_date String?
  created_at            String?
  updated_at            String?
  Transactions          Transactions[]

  UserInfo        UserInfo          @relation(fields: [user_info_uuid], references: [uuid])
  Item            Item              @relation(fields: [item_uuid], references: [uuid])
  Business        BusinessInfo?     @relation(fields: [business_info_uuid], references: [uuid])
  BenefitGroups   BenefitGroups?    @relation(fields: [group_uuid], references: [uuid])
  UserItemHistory UserItemHistory[]

  @@unique([user_info_uuid, business_info_uuid, item_uuid])
  @@map("user_item")
}

model UserItemHistory {
  uuid                       String            @id @default(uuid())
  user_item_uuid             String // FK para UserItem (o benefício específico)
  event_type                 UserItemEventType // Tipo do evento
  amount                     Int // Valor da movimentação (+/-)
  balance_before             Int // Saldo antes
  balance_after              Int // Saldo depois
  related_transaction_uuid   String? // FK opcional para Transactions (gasto ou cashback de uma transação)
  related_benefit_group_uuid String? // FK opcional para BenefitGroups (crédito inicial do grupo)
  created_at                 DateTime          @default(now())

  UserItem            UserItem       @relation(fields: [user_item_uuid], references: [uuid])
  // Relação opcional com Transações
  RelatedTransaction  Transactions?  @relation(fields: [related_transaction_uuid], references: [uuid])
  // Relação opcional com Grupos de Benefício
  RelatedBenefitGroup BenefitGroups? @relation(fields: [related_benefit_group_uuid], references: [uuid])

  @@map("user_item_history")
}

enum UserItemEventType {
  BENEFIT_CREDITED // Crédito inicial ou recorrente do benefício
  ITEM_SPENT // Gasto do saldo em uma transação
  CASHBACK_RECEIVED // Cashback creditado neste item específico
  REFUND_RECEIVED // Reembolso creditado neste item
  BALANCE_ADJUSTMENT // Ajuste manual de saldo
  BENEFIT_EXPIRED // Saldo expirado (se aplicável)
  PIX_RECEIVED // Crédito recebido via PIX
  OTHER // Outros
}

enum UserItemStatus {
  active
  inactive
  blocked
  cancelled
  to_be_cancelled
}

enum ContractType {
  BUSINESS
  USER
}

model ContractInfo {
  uuid               String       @id @default(uuid())
  item_uuid          String
  name               String?
  content            String
  version            String?
  assigned_at        String
  contract_type      ContractType
  business_info_uuid String?
  user_info_uuid     String?
  updated_at         String?

  Item         Item          @relation(fields: [item_uuid], references: [uuid])
  BusinessInfo BusinessInfo? @relation(fields: [business_info_uuid], references: [uuid])
  UserInfo     UserInfo?     @relation(fields: [user_info_uuid], references: [uuid])

  BusinessContract BusinessContract[]

  @@map("contract_info")
}

model BusinessContract {
  uuid               String @id @default(uuid())
  business_info_uuid String
  contract_info_uuid String

  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])
  ContractInfo ContractInfo @relation(fields: [contract_info_uuid], references: [uuid])

  @@map("business_contract")
}

enum TransactionStatus {
  pending
  success
  fail
  cancelled
}

enum TransactionType {
  P2P_TRANSFER // Transferência entre usuários
  POS_PAYMENT // Pagamento para comércio via PDV/QR Code
  ECOMMERCE_PAYMENT // Pagamento para comércio online
  CASH_IN_PIX_USER // Depósito via Pix pelo usuário
  CASH_IN_PIX_PARTNER // Depósito via Pix pela empresa/parceiro
  CASH_OUT // Saque (se for registrar aqui)
  BENEFIT_CREDIT // Crédito de benefício pela empresa (se for registrar aqui)
  // Adicionar outros tipos conforme sua necessidade
}

model Transactions {
  uuid                       String            @id @default(uuid())
  user_item_uuid             String?
  favored_user_uuid          String?
  favored_business_info_uuid String?
  payer_business_info_uuid   String?
  original_price             Int               @default(0)
  discount_percentage        Int               @default(0)
  net_price                  Int               @default(0)
  fee_percentage             Int?              @default(0) // Percentual da taxa aplicada
  fee_amount                 Int?              @default(0)
  partner_credit_amount      Int
  cashback                   Int               @default(0)
  description                String?
  provider_tx_id             String?           @unique
  pix_e2e_id                 String?           @unique
  status                     TransactionStatus
  transaction_type           TransactionType
  favored_partner_user_uuid  String?
  paid_at                    String?
  created_at                 String
  updated_at                 String?

  UserItem               UserItem?                @relation(fields: [user_item_uuid], references: [uuid])
  UserInfo               UserInfo?                @relation(fields: [favored_user_uuid], references: [uuid])
  BusinessInfo           BusinessInfo?            @relation("FavoredTransactions", fields: [favored_business_info_uuid], references: [uuid])
  PartnerUser            BusinessUser?            @relation(fields: [favored_partner_user_uuid], references: [uuid])
  PayerBusiness          BusinessInfo?            @relation("PayerTransactions", fields: [payer_business_info_uuid], references: [uuid])
  PartnerCreditSpend     PartnerCreditSpend[]
  BusinessAccountHistory BusinessAccountHistory[]
  UserItemHistory        UserItemHistory[]
  CorrectAccountHistory  CorrectAccountHistory[]

  @@map("transactions")
}

model BusinessRecommendation {
  uuid          String @id @default(uuid())
  business_name String
  owner_name    String
  city          String
  state         String
  neighborhood  String
  phone         String
  social_media  String

  @@map("business_recommendations")
}

enum BusinessAccountStatus {
  active
  inactive
}

model CorrectAccount {
  uuid                  String                  @id @default(uuid())
  balance               Int
  status                BusinessAccountStatus
  created_at            String
  updated_at            String?
  CorrectAccountHistory CorrectAccountHistory[]

  @@map("correct_account")
}

enum CorrectAccountEventType {
  PLATFORM_FEE_COLLECTED // Taxa da plataforma coletada de uma transação
  PAYOUT_SENT // Pagamento enviado (ex: para conta bancária)
  MANUAL_ADJUSTMENT // Ajuste manual (crédito ou débito)
  SERVICE_COST // Custo de serviço interno
  OTHER // Outros tipos
}

model CorrectAccountHistory {
  uuid                     String                  @id @default(uuid())
  correct_account_uuid     String // FK para CorrectAccount
  event_type               CorrectAccountEventType // Tipo do evento que causou a mudança
  amount                   Int // Valor da movimentação (+/-)
  balance_before           Int // Saldo antes da movimentação
  balance_after            Int // Saldo depois da movimentação
  related_transaction_uuid String? // FK opcional para Transactions (ex: taxa de uma transação)
  created_at               DateTime                @default(now())

  CorrectAccount     CorrectAccount @relation(fields: [correct_account_uuid], references: [uuid])
  RelatedTransaction Transactions?  @relation(fields: [related_transaction_uuid], references: [uuid])

  @@map("correct_account_history")
}

model BusinessAccount {
  uuid               String                @id @default(uuid())
  balance            Int
  business_info_uuid String
  status             BusinessAccountStatus
  created_at         String
  updated_at         String?

  BusinessInfo           BusinessInfo             @relation(fields: [business_info_uuid], references: [uuid])
  BusinessAccountHistory BusinessAccountHistory[]

  @@map("business_account")
}

model BusinessAccountHistory {
  uuid                     String                   @id @default(uuid())
  business_account_uuid    String // FK para BusinessAccount
  event_type               BusinessAccountEventType // Tipo do evento
  amount                   Int // Valor da movimentação (+/-)
  balance_before           Int // Saldo antes
  balance_after            Int // Saldo depois
  related_transaction_uuid String? // FK opcional para Transactions (pagamento recebido, taxa, etc.)
  created_at               DateTime                 @default(now())

  BusinessAccount    BusinessAccount @relation(fields: [business_account_uuid], references: [uuid])
  // Relação opcional com Transações
  RelatedTransaction Transactions?   @relation(fields: [related_transaction_uuid], references: [uuid])

  @@map("business_account_history")
}

enum BusinessAccountEventType {
  PAYMENT_RECEIVED // Pagamento recebido (valor líquido após taxas/cashback)
  PLATFORM_FEE_CHARGED // Taxa da plataforma debitada (se debitada separadamente) - Alternativamente, apenas registrar o líquido recebido.
  PARTNER_CASHBACK_COST // Custo do cashback oferecido pelo parceiro (se debitado separadamente) - Alternativamente, apenas registrar o líquido recebido.
  PAYOUT_REQUESTED // Solicitação de saque
  PAYOUT_PROCESSED // Saque processado/enviado
  REFUND_ISSUED // Reembolso emitido para um cliente
  MANUAL_ADJUSTMENT // Ajuste manual
  OTHER // Outros
}

model PartnerCredit {
  uuid                      String               @id @default(uuid())
  business_account_uuid     String
  original_transaction_uuid String
  balance                   Int
  spent_amount              Int                  @default(0)
  status                    PartnerCreditStatus
  availability_date         DateTime // Data de liquidação
  created_at                DateTime             @default(now())
  updated_at                DateTime             @updatedAt
  PartnerCreditSpend        PartnerCreditSpend[]

  @@map("partner_credits")
}

model PartnerCreditSpend {
  uuid                      String   @id @default(uuid())
  partner_credit_uuid       String // FK para PartnerCredit (Qual crédito foi fonte)
  spending_transaction_uuid String // FK para Transactions (Qual transação consumiu)
  amount_spent              Int // Quanto foi gasto NESTA movimentação específica
  created_at                DateTime @default(now())

  CreditSource        PartnerCredit @relation(fields: [partner_credit_uuid], references: [uuid])
  SpendingTransaction Transactions  @relation(fields: [spending_transaction_uuid], references: [uuid])

  @@map("partner_credit_spends")
}

// Enum para Status do Crédito (Simplificado)
enum PartnerCreditStatus {
  PENDING // Aguardando data de disponibilidade (pode ter spent_amount > 0)
  SETTLED // Já foi liquidado (o valor restante foi movido para BusinessAccount.balance)
}

enum SalesType {
  presencial
  delivery
  ambos
}

model PartnerConfig {
  uuid               String     @id @default(uuid())
  business_info_uuid String     @unique
  main_branch        String
  partner_category   String[]
  items_uuid         String[]
  admin_tax          Int?
  marketing_tax      Int?
  use_marketing      Boolean
  market_place_tax   Int?
  use_market_place   Boolean
  title              String?
  phone              String?
  description        String?
  sales_type         SalesType?
  cashback_tax       Int        @default(0)
  latitude           Float?
  longitude          Float?
  created_at         String?
  updated_at         String?

  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("partner_config")
}

model UserNotification {
  uuid           String  @id @default(uuid())
  user_info_uuid String
  title          String
  description    String
  read           Boolean
  created_at     String

  UserInfo UserInfo @relation(fields: [user_info_uuid], references: [uuid])

  @@map("user_notification")
}

model BusinessNotification {
  uuid               String  @id @default(uuid())
  business_user_uuid String
  title              String
  description        String
  read               Boolean
  created_at         String

  BusinessUser BusinessUser @relation(fields: [business_user_uuid], references: [uuid])

  @@map("business_notifications")
}

model BenefitGroups {
  uuid                       String  @id @default(uuid())
  group_name                 String
  employer_item_details_uuid String
  value                      Int
  business_info_uuid         String
  is_default                 Boolean
  created_at                 String?
  updated_at                 String?

  BusinessInfo    BusinessInfo        @relation(fields: [business_info_uuid], references: [uuid])
  EmployerItems   EmployerItemDetails @relation(fields: [employer_item_details_uuid], references: [uuid])
  UserItem        UserItem[]
  UserItemHistory UserItemHistory[]

  @@map("benefit_groups")
}

//**********ECOMMERCE MODELS************
model Categories {
  uuid        String     @id @default(uuid())
  name        String
  description String?
  is_active   Boolean
  created_at  String?
  updated_at  String?
  Products    Products[]

  @@map("categories")
}

enum ProductType {
  PHYSICAL // Para bens físicos que têm estoque e dimensões
  SERVICE // Para serviços que não têm estoque
  BOOKABLE_SERVICE
}

model Products {
  uuid               String      @id @default(uuid())
  category_uuid      String
  product_type       ProductType @default(PHYSICAL)
  ean_code           String?
  brand              String?
  name               String
  description        String?
  original_price     Int
  promotional_price  Int
  discount           Int
  image_urls         String[]
  is_mega_promotion  Boolean     @default(false)
  stock              Int
  weight             String?
  height             String?
  width              String?
  business_info_uuid String
  is_active          Boolean     @default(true)
  created_by_uuid    String // UUID do BusinessUser que CRIOU o produto
  updated_by_uuid    String // UUID do BusinessUser que fez a ÚLTIMA alteração
  deleted_at         DateTime?
  deleted_by_uuid    String?
  created_at         String?
  updated_at         String?

  Businessinfo   BusinessInfo     @relation(fields: [business_info_uuid], references: [uuid])
  Categories     Categories       @relation(fields: [category_uuid], references: [uuid])
  CreatedBy      BusinessUser     @relation("CreatedProducts", fields: [created_by_uuid], references: [uuid])
  UpdatedBy      BusinessUser     @relation("UpdatedProducts", fields: [updated_by_uuid], references: [uuid])
  DeletedBy      BusinessUser?    @relation("DeletedProducts", fields: [deleted_by_uuid], references: [uuid])
  ProductHistory ProductHistory[]
  CartItem       CartItem[]

  @@map("products")
}

model ProductHistory {
  uuid            String @id @default(uuid())
  product_uuid    String
  changed_by_uuid String // UUID do BusinessUser que fez a alteração

  field_changed String // O campo que foi alterado (ex: "stock", "price", "image_deleted")
  old_value     String? // O valor antigo do campo
  new_value     String? // O novo valor do campo

  changed_at DateTime @default(now())

  // Relacionamentos
  Product   Products     @relation(fields: [product_uuid], references: [uuid])
  ChangedBy BusinessUser @relation(fields: [changed_by_uuid], references: [uuid])

  @@map("product_history")
}

model EanProducts {
  uuid         String  @id @default(uuid())
  ean_code     String  @unique
  name         String?
  image_url    String?
  brand        String?
  description  String?
  max_price    Int?
  min_price    Int?
  gross_weight Int?
  net_weight   Int?
  height       Float?
  length       Float?
  width        Float?
  grpc_code    String?
  ncm_code     String?
  origin       String?
  created_at   String?

  @@map("ean_products")
}

model Cart {
  uuid               String  @id @default(uuid())
  user_info_uuid     String
  business_info_uuid String // Chave para garantir que o carrinho é de um único parceiro.
  created_at         String
  updated_at         String?

  // Relacionamentos
  user      UserInfo     @relation(fields: [user_info_uuid], references: [uuid])
  business  BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])
  cartItems CartItem[] // Um carrinho pode ter vários itens.

  // Garante que um usuário só pode ter um carrinho ativo por parceiro.
  @@unique([user_info_uuid, business_info_uuid])
  @@map("carts")
}

model CartItem {
  uuid         String    @id @default(uuid())
  cart_uuid    String
  product_uuid String
  quantity     Int       @default(1)
  deleted_at   DateTime?
  // Relacionamentos
  cart         Cart      @relation(fields: [cart_uuid], references: [uuid])
  product      Products  @relation(fields: [product_uuid], references: [uuid])

  // Garante que um produto só apareça uma vez por carrinho (a quantidade é que muda).
  @@unique([cart_uuid, product_uuid], name: "cart_product_unique")
  @@map("cart_items")
}

model CorrectUserBusinessInfo {
  uuid               String  @id @default(uuid())
  business_info_uuid String
  correct_admin_uuid String?
  created_at         String

  Businessinfo BusinessInfo  @relation(fields: [business_info_uuid], references: [uuid])
  CorrectAdmin CorrectAdmin? @relation(fields: [correct_admin_uuid], references: [uuid])

  @@map("correct_user_business")
}
